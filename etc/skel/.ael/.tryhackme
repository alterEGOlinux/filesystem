#!/usr/bin/env bash
## ----------------------------------------------------------------------- INFO
## [.ael/.tryhackme]
## author        = "fantomH @alterEGO Linux"
## created       = 2021-03-07 15:10:11 UTC
## updated       = 2023-08-04 02:58:16 UTC
## description   = "TryHackMe stuff."

[ -f ${HOME}/.ael/bash-ael/messages.bash ]                                  \
&& . ${HOME}/.ael/bash-ael/messages.bash

## -------------------- [ thm-connect ]                                     {{{
thm-connect() {

  THM_VPN="${THM_DIR}/${THM_PLAYER}.ovpn"
  if [[ -f ${THM_VPN} ]]; then
      sudo openvpn ${THM_VPN} &
      cd ${THM_ROOM_PATH}
      sleep 2
      $BROWSER "https://www.tryhackme.com/room/${THM_ROOM_NAME}"
  else
      # $BROWSER "https://tryhackme.com/vpn/get-config"
      $BROWSER "https://tryhackme.com/access"
      cd ${THM_ROOM_PATH}
  fi
  }
  ## }}}

# (* thm-init *)                                                           {{{1
thm-init() {

    THM_DIR="${HOME}/.ael/tryhackme"
    if [[ ! -d ${THM_DIR} ]]; then
        mkdir ${THM_DIR}
    fi
    
    THM_TOOLS="${THM_DIR}/tools"
    if [[ ! -d ${THM_TOOLS} ]]; then
        mkdir ${THM_TOOLS}
    fi
    
    THM_CONFIG="${THM_DIR}/.tryhackme.cfg"
    if [[ ! -e ${THM_CONFIG} ]]; then
        cat <<EOF> ${THM_CONFIG}
# -----------------------------------------------------------------------------
#               { alterEGO Linux: "Open the vault of knowledge" }
# -----------------------------------------------------------------------------
#
# ~/.ael/tryhackme/.tryhackme.cfg
#   created        : 2022-12-02 12:13:16 UTC
#   updated        : 2022-12-02 12:13:16 UTC
#   description    : description
# _____________________________________________________________________________

# [* MAIN DIRECTORY *]

  THM_DIR="${THM_DIR}"

# [* CONFIG FILE *]

  THM_CONFIG="${THM_CONFIG}"

# [* ROOM *]

  THM_ROOM_NAME=""
  THM_ROOM_PATH="${THM_DIR}/${THM_ROOM_NAME}"

# [* PLAYER *]

  THM_PLAYER=""

# [* IP ADDRESSES *]

  THM_RHOST=""
  THM_LHOST=""

# [* TOOLS *]

  THM_TOOLS="${THM_TOOLS}"
  
EOF
  fi

    thm-reload-config

  }                                                        # FIN: thm-init 1}}}

# (* thm-login *)                                                          {{{1
thm-login() {

    $BROWSER "https://www.tryhackme.com/login"
  }                                                       # FIN: thm-login 1}}}

# (* thm-reload-all *)                                                     {{{1
thm-reload-all() {

    source ${HOME}/.ael/.tryhackme
  }                                                  # FIN: thm-reload-all 1}}}

# (* thm-reload-config *)                                                  {{{1
thm-reload-config() {

    source ${THM_CONFIG}
    export THM_DIR
    export THM_CONFIG
    export THM_ROOM_NAME
    export THM_ROOM_PATH
    export THM_PLAYER
    export THM_RHOST
    export THM_LHOST
    export THM_TOOLS
    
    thm-show-config
    
    message action "TRYHACKME CONFIG READY..."
  }                                               # FIN: thm-reload-config 1}}}

# (* thm-set-lhost *)                                                      {{{1
thm-set-lhost() {

    if [[ ${#} == 1 ]]; then
        _lhost=${1}
        sed -i -e "s/\(THM_LHOST=\).*/\1'${_lhost}'/g" "${THM_CONFIG}"
    else
        message error "You must provide a local IP address!"
    fi
    thm-reload-config
  }                                                   # FIN: thm-set-lhost 1}}}

# (* thm-set-msf *)                                                        {{{1
thm-set-msf() {

    #... ( METASPLOIT )
    #... Create msfconsole resource file.
    #... This can be loaded using:
    #... msf -r ~/.msf4/<resourcefile.rc>
    #... Or sourced directly in msf using:
    #... `resource thm.rc`

    if [[ ! -d "${HOME}/.msf4" ]]; then
        mkdir ${HOME}/.msf4
    fi

    cat << EOF > ~/.msf4/thm.rc
load alias
alias set-lhost "set LHOST ${THM_LHOST}"
alias set-rhost "set RHOSTS ${THM_RHOST}"
EOF

    message result "Use \`resource thm.rc\` in msfconsole."
  }                                                     # FIN: thm-set-msf 1}}}

# (* thm-set-player *)                                                     {{{1
thm-set-player() {

    if [[ ${#} == 1 ]]; then
        _player=${1}
        sed -i -e "s/\(THM_PLAYER=\).*/\1'${_player}'/g" "${THM_CONFIG}"
    else
        message error "You must provide a player's name!"
    fi
    thm-reload-config
  }                                                  # FIN: thm-set-player 1}}}

# (* thm-set-rhost *)                                                      {{{1
thm-set-rhost() {

    if [[ ${#} == 1 ]]; then
        _rhost=${1}
        sed -i -e "s/\(THM_RHOST=\).*/\1'${_rhost}'/g" "${THM_CONFIG}"
    else
        message error "You must provide a remote IP address!"
    fi
    thm-reload-config
  }                                                   # FIN: thm-set-rhost 1}}}

# (* thm-set-room *)                                                       {{{1
thm-set-room() {

    if [[ ${#} == 1 ]]; then
        _room=${1}
        sed -i -e "s/\(THM_ROOM_NAME=\).*/\1'${_room}'/g" "${THM_CONFIG}"
        sed -i -e "s:\(THM_ROOM_PATH=\).*:\1'${THM_DIR}/${_room}':g" "${THM_CONFIG}"
        if [[ ! -d "${THM_DIR}/${_room}" ]]; then
            mkdir "${THM_DIR}/${_room}"
        fi
    else
        message error "You must provide a room's name!"
    fi
    thm-reload-config
  }                                                    # FIN: thm-set-room 1}}}

# (* thm-show-config *)                                                    {{{1
thm-show-config() {

    message title "    VARIABLE         SET TO"
    message result "THM_DIR          ${THM_DIR}"
    message result "THM_CONFIG       ${THM_CONFIG}"
    if [[ ${THM_ROOM_NAME} == "" ]];then
        message alert "THM_ROOM_NAME    Please set room name!"
    else
        message result "THM_ROOM_NAME    ${THM_ROOM_NAME}"
    fi
    if [[ ${THM_ROOM_PATH} == ${THM_DIR}/ ]];then
        message alert "THM_ROOM_PATH    Please set room name!"
    else
        message result "THM_ROOM_PATH    ${THM_ROOM_PATH}"
    fi
    if [[ ${THM_PLAYER} == "" ]];then
        message alert "THM_PLAYER       Please set player name!"
    else
        message result "THM_PLAYER       ${THM_PLAYER}"
    fi
    if [[ ${THM_RHOST} == "" ]];then
        message alert "THM_RHOST        Please set remote IP!"
    else
        message result "THM_RHOST        ${THM_RHOST}"
    fi
    if [[ ${THM_LHOST} == "" ]];then
        message alert "THM_LHOST        Please set local IP!"
    else
        message result "THM_LHOST        ${THM_LHOST}"
    fi
    message result "THM_TOOLS        ${THM_TOOLS}"
  }                                                 # FIN: thm-show-config 1}}}

# (* thm-webroom *)                                                        {{{1
thm-webroom() {

    $BROWSER "https://www.tryhackme.com/room/${THM_ROOM_NAME}"
  }                                                     # FIN: thm-webroom 1}}}

# (* thm-help *)                                                           {{{1
thm-help() {

    message action "tryhackme help"

    cat <<EOF
Usage:
    thm [options]

Options:
    connect
    init
    login 
    msf
    reload-all
    reload-config
    set-lhost
    set-player
    set-room
    set-rhost
    show-config
    webroom
    help
    usage 

Functions:
  thm-connect
  thm-init
  thm-login
  thm-reload-all
  thm-reload=config
  thm-set-lhost
  thm-set-msf
  thm-set-player
  thm-set-rhost
  thm-set-room
  thm-show-config
  thm-webroom
EOF
  }                                                        # FIN: thm-help 1}}}

# [* COMPLETION *]

  for x in thm .tryhackme; do
    options="\
            connect
            init
            login 
            msf
            reload-all
            reload-config
            set-lhost
            set-player
            set-room
            set-rhost
            show-config
            webroom
            help
            usage" 
    complete -W "${options[@]}" $x
  done

# [* OPTIONS *]

  case "${1}" in

      connect )
          thm-connect
          ;;

      login )
          thm-login
          ;;

      msf )
        message action "Starting msfconsole..."
        thm-set-msf
        msfconsole -x "db_connect ${USER}@msf" -r ~/.msf4/thm.rc
        ;;

      reload-all )
          thm-reload-all
          ;;

      reload-config )
          thm-reload-config
          ;;

      set-lhost )
          if [[ ${#} == 2 ]]; then
              shift
              _lhost=${1}
              thm-set-lhost ${_lhost}
          else
              message error "You must provide a local IP address!"
          fi
          ;;

      set-player )
          if [[ ${#} == 2 ]]; then
              shift
              _player=${1}
              thm-set-player ${_player}
          else
              message error "You must provide a player's name!"
          fi
          ;;

      set-rhost )
          if [[ ${#} == 2 ]]; then
              shift
              _rhost=${1}
              thm-set-rhost ${_rhost}
          else
              message error "You must provide a remote IP address!"
          fi
          ;;

      set-room )
          if [[ ${#} == 2 ]]; then
              shift
              _room=${1}
              thm-set-room ${_room}
          else
              message error "You must provide a room's name!"
          fi
          ;;

      show-config )
          thm-show-config
          ;;

      webroom )
          thm-webroom
          ;;

      help|usage )
          thm-help
          ;;

      init|* )
          thm-init
          ;;

  esac

# vim: syntax=sh
# vim: foldmethod=marker
## ------------------------------------------------------------- FIN ¯\_(ツ)_/¯

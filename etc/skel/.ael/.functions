#! /usr/bin/env sh
# -----------------------------------------------------------------------------
#              { alterEGO Linux: "Open the vault of knowledge" }
# -----------------------------------------------------------------------------
#
# ~/.ael/.functions
#   created        : 2021-05-25 19:40:20 UTC
#   updated        : 2022-11-24 01:43:20 UTC
#   description    : Shell functions collection.
# _____________________________________________________________________________

# [* MODULES *]

  [ -f ${HOME}/.ael/bash-ael/messages.bash ]                                  \
  && . ${HOME}/.ael/bash-ael/messages.bash

# [* FUNCTIONS *]

busy() {

    #... When the boss comes around to look busy.
    #... ref. https://www.commandlinefu.com/commands/view/6663/pretend-to-be-busy-in-office-to-enjoy-a-cup-of-coffee
    #... CTRL+c to quit.

    cat /dev/urandom                                                          \
    | hexdump -C                                                              \
    | grep --color=always 'ca fe'
  }

cheat() {

    #... Query https://cheat.sh.
    #... Menu with `fzf` and display with `less`.
    #... https://github.com/chubin/cheat.sh

    cheat="$(curl -s cheat.sh/:list                                           \
            | fzf --layout="reverse"                                          \
                  --prompt='::'                                               \
                  --preview-window=up:80%                                     \
                  --preview 'cat <(curl -s cheat.sh/{})')"

    [[ -z ${cheat} ]] && exit 0

    curl -s cheat.sh/"${cheat}" | less -R
  }

delete() {

    #... Delete directory.

    if [ -d "${1}" ]; then
      message question "Are you sure your want to delete this directory? [y/N]"
        if [[ "${_INPUT}" =~ ^([yY][eE][sS]|[yY])$ ]]; then
          rm --recursive --force "${1}" 
        else
          message warning "OK... Abording deletion!"
        fi
    else
      message warning "There is nothing to do here!"
    fi
  }

directory_size() {

    #... Check size of biggest directories.

    message action "Size of current directory, followed by biggest child directories:"
    #... du -bh --max-depth 1 | sort -rh | head
    du --bytes --human-readable --max-depth 1                                 \
    | sort --reverse --human-numeric-sort                                     \
    | head
  }
  alias directory-size='directory_size'

fixout() {

    #... Fix history and exit.
    #... Don't try to put this code in a shell script, it won't work.
    #... `history` don't play well in scripts.

    history -n && history                                                     \
    | sort -k2 -k1nr                                                          \
    | uniq -f1                                                                \
    | sort -n                                                                 \
    | cut -c8- > ~/.tmp$$                                                     \
    && history -c                                                             \
    && history -r ~/.tmp$$                                                    \
    && history -w                                                             \
    && rm ~/.tmp$$                                                            \
    && exit
  }

fuck() {

    #... Repeat last cmd with sudo if forgotten.

    sudo $(history -p !!)
  }

getmp3() {

    #... Extract audio to .mp3

    youtube-dl -x --audio-format mp3 --prefer-ffmpeg "${1}"
  }

history_cleaner() {

    if [[ ${@} != '' ]]; then

      #... Remove .bash_history entry.
      #... Usage: `historyCleaner youtube-dl`
      #... or `historyCleaner cd$`

      dumpfile="/tmp/historyCleaner.dump"

      history -a
      cp ~/.bash_history ${dumpfile}
      sed -i "/^${@}/d" ${dumpfile}
      history -c                                                              \
      && history -r ${dumpfile}                                               \
      && history -w
      rm ${dumpfile}
      history

    else

      #... Uses `fzf` to sort through the bash history and let you delete an entry.

      choices=$(history | fzf)
      [[ -z "${choices}" ]] && exit 1

      message question "Are you sure your want to delete this? [y/N]"
        if [[ "${_INPUT}" =~ ^([yY][eE][sS]|[yY])$ ]]; then
          to_delete=$(awk '{ print $1 }' <<< "${choices}")
          history -d ${to_delete}
        fi
    fi
  }
  alias history-cleaner='history_cleaner'

ispeed() {

    #... Test Internet speed.

    curl -s https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py \
    | python -
}

nmapBasic() {

    message action "Will run function <nmapBasic>:\n    sudo grc nmap -sV -O -sC --traceroute <ip address>"
    message alert "Scanning multiple devices or network will take forever..."
    sleep 2
    sudo grc nmap -sV -O -sC --traceroute ${@}
}

ports() {

    message action "Will run function <ports>:\n    sudo netstat -tulanp"
    sudo netstat -tulanp
}

psBasic() {

    message action "Will run function <psbasic>:\n     ps aux"
    ps aux
}

psGrep() {

    message action "Will fun function <psgrep>:\n    ps aux | grep -Ei <application name>"
    ps aux | grep -Ei "$@"
}

pyClean () {

    #... ref. https://stackoverflow.com/a/41386937/10500496  
    find . -type f -name '*.py[co]' -delete -o -type d -name __pycache__ -delete
}

pyServer() {

    message action "Will run function <pyServer>:\    python -m http.server"
    message result "Starting web server ..."
    python -m http.server
}

searchContent() {

  #... src. https://github.com/junegunn/fzf/wiki/Examples#searching-file-contents

  rg --files-with-matches --no-messages "$1"                                  \
  | fzf --preview "highlight -O ansi -l {} 2> /dev/null | rg --colors 'match:bg:yellow' --ignore-case --pretty --context 10 '$1' || rg --ignore-case --pretty --context 10 '$1' {}"
}
alias sc="searchcontent"

shellInfo() {

    shopt -s extdebug
    type -a ${@}
    declare -F ${@}
}

showUTC() {

    echo  $(date --utc "+%F %H:%M:%S %Z")
}

tagalog() {

    wget -U "Mozilla/5.0" -qO - "http://translate.googleapis.com/translate_a/single?client=gtx&sl=auto&tl=tl&dt=t&q=${@}" \
    | awk -F '"' '{print $2}'                                                 \
    | head -n 1
}

translate() {

    #... Add language abbr after string to translate.
    #... For example, translate "Hello world" fr

    wget -U "Mozilla/5.0" -qO - "http://translate.googleapis.com/translate_a/single?client=gtx&sl=auto&tl=${2}&dt=t&q=${1}" \
    | awk -F '"' '{print $2}'                                                 \
    | head -n 1
}

tunsrc() {

    message action "Reading tunnels..."
    message title "INT\tIP ADDR   \tPID\tNAME"
    while read -r _interface; do

      _ip=$(grep -oP '(?<=inet )(.*)(?=/)' <<<"${_interface}")
      _tun=$(awk '{ print $NF }' <<<"${_interface}")
      _ps=$(sudo grep -r $_tun /proc/*/fdinfo 2>/dev/null | cut -d / -f 3)
      _cmd="$(ps -o cmd --no-headers ${_ps})"

      if [[ $(awk '/openvpn/ && /server/' <<< ${_cmd}) ]]; then
        _tunname="OpenVPNServer"
      elif [[ $(awk '/openvpn/ && /tryhackme/' <<< "${_cmd}") ]]; then
        _tunname="TryHackMe"
      elif [[ $(awk '/nordvpn/' <<< "${_cmd}") ]]; then
        _tunname="NordVPN"
      else
        _tunname="UNDEFINED"
      fi

      printf "%b\n" "${_tun}\t${_ip}\t${_ps}\t${_tunname}"

    done <<< $(ip a | grep -E 'inet [1-9].*global.*(tun)')
}

viewIPs() {

    message action "Current IP addresses:"
    /usr/bin/ip address | grep "inet [1-9]" | awk '{ print $NF "\t" $2 }'
}

whoisWeb() {

    #... Query the web if `whois` port 43 is blocked on your network.

    curl --silent https://whoisjs.com/api/v1/${1}                             \
    | jq ".raw"                                                               \
    | sed "s/\\\r\\\n/\\n/g"
}

# -----------------------------------------------------------------------------
# vim: foldmethod=marker
# vim: syntax=sh
# ____________________________{ FIN ¯\_(ツ)_/¯ }_______________________________

#! /usr/bin/env sh
## ----------------------------------------------------------------------- INFO
## [.ael/.functions]
## author        = "fantomH @alterEGO Linux"
## created       = 2021-05-25 19:40:20 UTC
## updated       = 2023-08-01 19:52:58 UTC
## description   = "Shell functions collection"

[ -f ${HOME}/.ael/bash-ael/messages.bash ]                                    \
&& . ${HOME}/.ael/bash-ael/messages.bash

## -------------------- [ busy ]                                            {{{
## [busy()]
## version       = 2023-08-01 19:55:12 UTC
## description   = "When the boss comes around to look busy."
## notes         = '''
## ref. https://www.commandlinefu.com/commands/view/6663/pretend-to-be-busy-in-office-to-enjoy-a-cup-of-coffee
## CTRL+c to quit.
## '''

busy() {

    message action "Function called <busy()> from $(basename $BASH_SOURCE)"
    echo

    cat /dev/urandom                                                          \
    | hexdump -C                                                              \
    | grep --color=always 'ca fe'
  }
  ## }}}

## -------------------- [ cheat ]                                           {{{
## [cheat()]
## version       = 2023-08-01 19:57:57 UTC
## description   = "Query https://cheat.sh."
## notes         = '''
## Menu with `fzf` and display with `less`.
## https://github.com/chubin/cheat.sh
## '''

cheat() {

    message action "Function called <cheat()> from $(basename $BASH_SOURCE)"
    echo

    cheat="$(curl -s cheat.sh/:list                                           \
            | fzf --layout="reverse"                                          \
                  --prompt='::'                                               \
                  --preview-window=up:80%                                     \
                  --preview 'cat <(curl -s cheat.sh/{})')"

    [[ -z ${cheat} ]] && exit 0

    curl -s cheat.sh/"${cheat}" | less -R
  }
  ## }}}

## -------------------- [ delete ]                                          {{{
## [delete()]
## version       = 2023-08-01 19:59:45 UTC
## description   = "Delete directory."

delete() {

    message action "Function called <delete()> from $(basename $BASH_SOURCE)"
    echo

    if [ -d "${1}" ]; then
      message question "Are you sure your want to delete this directory? [y/N]"
        if [[ "${_INPUT}" =~ ^([yY][eE][sS]|[yY])$ ]]; then
          rm --recursive --force "${1}" 
        else
          message warning "OK... Abording deletion!"
        fi
    else
      message warning "There is nothing to do here!"
    fi
  }
  ## }}}

## -------------------- [ directory-size ]                                  {{{
## [directory-size()]
## version       = 2023-08-01 20:01:01 UTC
## description   = "Check size of biggest directories."

directory_size() {

    message action "Function called <directory_size()> from $(basename $BASH_SOURCE)"
    message action "Aliased to <directory-size>"
    message action "Command <du -bh --max-depth 1 | sort -rh | head>"
    message action "Size of current directory, followed by biggest child directories:"
    echo

    ## du -bh --max-depth 1 | sort -rh | head
    du --bytes --human-readable --max-depth 1                                 \
    | sort --reverse --human-numeric-sort                                     \
    | head
  }
  alias directory-size='directory_size'
  ## }}}

## -------------------- [ fixout ]                                          {{{
## [fixout()]
## version       = 2023-08-02 00:07:03 UTC
## description   = "Fix bash history and exit."
## notes         = '''
## Don't try to put this code in a shell script, it won't work.
## `history` don't play well in scripts.
## '''

fixout() {

    message action "Function called <fixout()> from $(basename $BASH_SOURCE)"
    message action "Cleaning history before closing ..."
    echo

    sleep 2

    history -n && history                                                     \
    | sort -k2 -k1nr                                                          \
    | uniq -f1                                                                \
    | sort -n                                                                 \
    | cut -c8- > ~/.tmp$$                                                     \
    && history -c                                                             \
    && history -r ~/.tmp$$                                                    \
    && history -w                                                             \
    && rm ~/.tmp$$                                                            \
    && exit
  }
  ## }}}

## -------------------- [ fuck ]                                            {{{
## [fuck()]
## version       = 2023-08-02 00:10:38 UTC
## description   = "Repeats last cmd with sudo if forgotten"

fuck() {

    message action "Function called <fuck()> from .functions"
    message action "Command <sudo \$(history -p !!)"
    message action "Repeating last command as sudo user ..."
    echo

    sudo $(history -p !!)
  }
  ## }}}

## -------------------- [ getmp3 ]                                          {{{
## [getmp3()]
## version       = 2023-08-02 00:36:18 UTC
## description   = "Extract video audo to .mp3"

getmp3() {

    message action "Function called <getmp3()> from $(basename $BASH_SOUCE)"
    message action "youtube-dl -x --audio-format mp3 --prefer-ffmpeg <url>"
    message action "Extract audio from video to mp3 format ..."
    echo

    youtube-dl -x --audio-format mp3 --prefer-ffmpeg "${1}"
  }
  ## }}}

## -------------------- [ history-cleaner ]                                 {{{
## [history-cleaner()]
## version       = 2023-08-02 00:44:35 UTC
## description   = "Cleans bash history"
## todo          = '''
## - Use only fzf and multi select [2023-08-01]
## '''

history_cleaner() {

    message action "Function called <history_cleaner()> from $(basename $BASH_SOURCE)"
    message action "Aliased to <history-cleaner>"
    message action "Cleans .bash_history file ..."
    echo

    if [[ ${@} != '' ]]; then

      ## Remove .bash_history entry.
      ## Usage: `history-cleaner youtube-dl`
      ## or `history-cleaner cd$`

      dumpfile="/tmp/history-cleaner.dump"

      history -a
      cp ~/.bash_history ${dumpfile}
      sed -i "/^${@}/d" ${dumpfile}
      history -c                                                              \
      && history -r ${dumpfile}                                               \
      && history -w
      rm ${dumpfile}
      history

    else

      ## Uses `fzf` to sort through the bash history and let you delete an entry.

      choices=$(history | fzf)
      [[ -z "${choices}" ]] && exit 1

      message question "Are you sure your want to delete this? [y/N]"
        if [[ "${_INPUT}" =~ ^([yY][eE][sS]|[yY])$ ]]; then
          to_delete=$(awk '{ print $1 }' <<< "${choices}")
          history -d ${to_delete}
        fi
    fi
  }
  alias history-cleaner='history_cleaner'
  ## }}}

## -------------------- [ processes ]                                       {{{
## [processes()]
## version       = 2023-08-02 00:51:54 UTC
## description   = "Show processes."

processes() {

    message action "< processes > from $(basename $BASH_SOURCE)"
    message action "Showing processes ..."
    echo

    ps aux
  }
  ## }}}

## -------------------- [ ps-grep ]                                         {{{
## [ps-grep()]
## version       = 2023-08-02 00:56:31 UTC
## description   = "Show processes for a particular application."

ps_grep() {

    message action "< ps-grep > from $(basename $BASH_SOURCE)"
    message action "Showing processes for "${@}" ..."
    echo

    ps aux | grep -Ei "$@"
  }
  alias ps-grep='ps_grep'
  ## }}}

## -------------------- [ py-clean ]                                        {{{
## [py-clean()]
## version       = 2023-08-02 00:59:00 UTC
## description   = "Clean python cache in current directory."
## notes         = '''
## ref. https://stackoverflow.com/a/41386937/10500496
## '''

py_clean () {

    message action "< py-clean > from $(basename $BASH_SOURCE)"
    message action "Cleaning python cache in current directory ..."
    echo

    find . -type f -name '*.py[co]' -delete -o -type d -name __pycache__ -delete
  }
  alias py-clean='py_clean'
  ## }}}

## -------------------- [ reset-time ]                                      {{{
## [reset-time()]
## version       = 2023-08-02 01:02:11 UTC
## description   = "Reset system time."
## notes         = '''
## Useful when Windows boot screw time.
## '''

reset_time() {

    message action "< reset-time > from $(basename $BASH_SOURCE)"
    message action "Resetting time ..."
    echo

    sudo timedatectl set-ntp true
    sudo hwclock --systohc --utc

    echo  $(date "+%F %H:%M:%S %Z")
  }
  alias reset-time="reset_time"
  ## }}}

## -------------------- [ search-content ]                                  {{{
## [search-content()]
## version       = 2023-08-02 01:05:06 UTC
## description   = "Search file content."
## notes         = '''
## src. https://github.com/junegunn/fzf/wiki/Examples#searching-file-contents
## '''

search_content() {

    message action "< search-content > from $(basename $BASH_SOURCE)"
    message action "Searching content "${1}" ..."
    echo

    rg --files-with-matches --no-messages "$1"                                \
    | fzf --preview "highlight -O ansi -l {} 2> /dev/null | rg --colors 'match:bg:yellow' --ignore-case --pretty --context 10 '$1' || rg --ignore-case --pretty --context 10 '$1' {}"
  }
  alias sc="search_content"
  ## }}}

## -------------------- [ shell-info ]                                      {{{
## [shell-info()]
## version       = 2023-08-02 01:18:13 UTC
## description   = "Gives shell function or alias info."
## notes         = '''
## Could build something with fzf to search and give info.
## ref. https://stackoverflow.com/a/949006/10500496
## You can use the bash(1) built-in compgen
##     compgen -c will list all the commands you could run.
##     compgen -a will list all the aliases you could run.
##     compgen -b will list all the built-ins you could run.
##     compgen -k will list all the keywords you could run.
##     compgen -A function will list all the functions you could run.
##     compgen -A function -abck will list all the above in one go.
## '''

shell_info() {

    message action "< shell-info > from $(basename $BASH_SOURCE)"
    message action "Shell information for "${@}" ..."
    echo

    shopt -s extdebug
    type -a ${@}
    declare -F ${@}
  }
  alias shell-info="shell_info"
  ## }}}

## -------------------- [ show-utc ]                                        {{{
## [show-utc()]
## version       = 2023-08-02 01:36:14 UTC
## description   = "Shows UTC time."

show_utc() {

    message action "< show-utc > from $(basename $BASH_SOURCE)"
    message action "UTC time ..."
    echo

    echo  $(date --utc "+%F %H:%M:%S %Z")
  }
  alias show-utc="show_utc"
  ## }}}

tagalog() {

    message action "Function called <tagalog()> from $(basename $BASH_SOURCE)"
    message action "Translating "${@}" to Tagalog ..."
    echo

    wget -U "Mozilla/5.0" -qO - "http://translate.googleapis.com/translate_a/single?client=gtx&sl=auto&tl=tl&dt=t&q=${@}" \
    | awk -F '"' '{print $2}'                                                 \
    | head -n 1
  }

translate() {

    #... Add language abbr after string to translate.
    #... For example, translate "Hello world" fr

    message action "Function called <translate()> from $(basename $BASH_SOURCE)"
    message action "Usage <translate <word(s)> <language code>>"
    message action "Translating "${1}" to ${2} ..."
    echo

    wget -U "Mozilla/5.0" -qO - "http://translate.googleapis.com/translate_a/single?client=gtx&sl=auto&tl=${2}&dt=t&q=${1}" \
    | awk -F '"' '{print $2}'                                                 \
    | head -n 1
  }

# vim: syntax=sh
# vim: foldmethod=marker
## ------------------------------------------------------------- FIN ¯\_(ツ)_/¯

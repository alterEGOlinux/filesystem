#!/usr/bin/env sh
# -----------------------------------------------------------------------------
#              { alterEGO Linux: "Open the vault of knowledge" }
# -----------------------------------------------------------------------------
#
# ~/.ael/.containers
#   created        : 2021-12-06 11:15:11 UTC
#   updated        : 2023-03-02 12:44:53 UTC
#   description    : Containers functions and configuration.
# _____________________________________________________________________________

# [ modules ]

  [ -f ${HOME}/.ael/bash-ael/messages.bash ]                                  \
  && . ${HOME}/.ael/bash-ael/messages.bash

# [ docker services ]

docker666() {
  #... START/STATUS/STOP docker service

  _status=$(systemctl is-active docker.service)

  case "${1}" in

    start )
      #... Checking if docker.service is running
      if [ ${_status} = 'active' ]; then
        message alert "Docker.service is active"
      else
        sudo systemctl start docker.service
        message result "Starting docker.service..."
      fi
      ;;

    status )
      message action "Checking docker.service status:"
      message result "Docker.service is ${_status}"
      ;;

    stop )
      #... Checking docker.servie status
      if [ ${_status} = 'inactive' ]; then
        message alert "Docker.service is already stopped."
      else
        message question "Should I stop docker.service? [y/N]"
          if [[ "${_INPUT}" =~ ^([yY][eE][sS]|[yY])$ ]]; then
            sudo systemctl stop docker.socket
            sudo systemctl stop docker.service
            message question "Would you like to delete docker0 network interface? [y/N]"
              if [[ "$_INPUT" =~ ^([yY][eE][sS]|[yY])$ ]]; then
                sudo ip link delete docker0 
              else
                message result "Leaving network interface intact."
                message result "Moving on..."
              fi
          else
            message result "Leaving docker.service running..."
            message result "Moving on..."
          fi
      fi
      ;;

    * )
      message warning "Usage: docker666 [start|status|stop]"

  esac

}

# [ docker stats ]

docker_stats() {
    #... TODO: Verify why IP addresses don't show. [2023-03-02]

    if [[ "$(systemctl is-active docker.service)" == "inactive" ]]; then
      docker666 start
    fi

    message action "Checking docker stats..."
    while read -r d; do
      _containerID=$(awk '{ print $1 }' <<< "${d}")
      if [[ -z "${_containerID}" ]]; then
        message warning "No container exists..."
      else
        message title "CONTAINER ID\tIP ADDR   \tNAME"
        _name=$(awk '{ print $2 }' <<< "${d}")
        _ip=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${_containerID})
        printf "%b\n" "${_containerID}\t${_ip}\t${_name}"
      fi
    done <<< $(docker ps -a | tail -n+2)
}

  alias docker-stats="docker_stats"

# [ docker cleaner ]

docker_container_cleaner() {

    if [[ "$(systemctl is-active docker.service)" == "inactive" ]]; then
        docker666 start
    fi

    message action "This will remove all Docker containers on this machine..."
    message question "Proceed? [Y/n]"
    if [[ "$_INPUT" =~ ^([yY][eE][sS]|[yY])$ ]]; then
        for c in $(docker container ls --all | awk 'FNR > 1 {print $1}'); do
            docker container rm $c
        done
    else
        message result "GoodBye!!!"
    fi
}

  alias docker-container-cleaner="docker_container_cleaner"

# [ cyberchef ]

cyberchef() {

    docker666 start

    if [[ "${1}" == 'stop' ]]; then
        docker stop $(docker ps | grep "mpepping/cyberchef"  | cut -d ' ' -f1)
        docker666 stop
    else
        if docker ps --all | grep -q "mpepping/cyberchef"; then
            $BROWSER "http://localhost:8888"
        else
            message action "Starting Cyberchef container on AEL..."
            docker run --rm -d -p 8888:8000 mpepping/cyberchef                    \
            && $BROWSER "http://localhost:8888"
        fi
    fi
}

# [ damn vulnerable webapp (DVWA) ]

dvwa() {

    docker666 start

    if [[ "${1}" == 'stop' ]]; then
        docker stop $(docker ps | grep DVWA | cut -d ' ' -f1)
        docker666 stop
    else
        message action "Starting Damn Vulnerable Webapp container on AEL..."
        #... If container doesn't exist, create one
        if [[ -z $(docker ps -a | awk '/DVWA/ { print $NF }') ]]; then
            docker run --name DVWA -it -p 81:80 vulnerables/web-dvwa &
            sleep 10
            $BROWSER "http://localhost:81/login.php"
        else
            if [[ -z "$(docker ps | grep DVWA)" ]]; then
                docker start DVWA
                $BROWSER "http://localhost:81/login.php"
            else
                $BROWSER "http://localhost:81/login.php"
            fi
        fi
    fi
}

# [ OWASP juice shop ]

juice_shop() {

    docker666 start

    if [[ "${1}" == 'stop' ]]; then
        docker stop $(docker ps | grep juice_shop | cut -d ' ' -f1)
        docker666 stop
    else
        message action "Starting OWASP Juice Shop container on AEL..."
        #... If container doesn't exist, create one
        if [[ -z $(docker ps -a | awk '/juice_shop/ { print $NF }') ]]; then
            docker run --name juice_shop -p 3000:3000 bkimminich/juice-shop &
            sleep 10
            $BROWSER "http://localhost:3000"
        else
            if [[ -z "$(docker ps | grep juice_shop)" ]]; then
                docker start juice_shop
                $BROWSER "http://localhost:3000"
            else
                $BROWSER "http://localhost:3000"
            fi
        fi
    fi
}

  alias juice-shop="juice_shop"

# [ kali linux ]

kali() {

    docker666 start
    xhost +

    message action "Starting Kali Linux container on AEL..."

    #... TODO: If image doesn't exist, create from /usr/local/share/dockerfiles/Dockerfile-kali
    #... docker build -f /usr/local/share/dockerfiles/Dockerfile-kali --tag kali_on_ael .

    #... If container doesn't exist, create one
    if [[ -z $(docker ps -a | awk '/kali_on_ael/ { print $NF }') ]]; then
        docker run --name kali_on_ael --net="host" --privileged -it -v /tmp/.X11-unix:/tmp/.X11-unix kali_on_ael
    else
        if [[ -z "$(docker ps | grep kali_on_ael)" ]]; then
            docker start -i kali_on_ael
        else
            message alert "Kali_on_ael is already running..."
        fi
    fi

    xhost -
    docker666 stop
}

# -----------------------------------------------------------------------------
# vim: foldmethod=marker
# vim: syntax=sh
# ____________________________{ FIN ¯\_(ツ)_/¯ }_______________________________

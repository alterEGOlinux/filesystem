#!/usr/bin/env python
## ----------------------------------------------------------------------- INFO
## [bin/ael-menu]
## author        : fantomH @alterEGO Linux
## created       : 2023-08-08 14:40:10 UTC
## updated       : 2023-11-08 01:55:23 UTC
## description   : Application launcher using `fzf` and `tmux`

from collections import namedtuple
import os
import tomllib
from pprint import pprint
import random
import shlex
import subprocess
import sys
from time import sleep

CONFIGDIR = os.path.join(os.path.expanduser('~'), '.ael', '.ael-menu')
MAINCONFIG = os.path.join(CONFIGDIR, 'ael-menu.toml')
EXTRACONFIG = os.path.join(CONFIGDIR, 'ael-menu-extra.toml')

# """
# Description of the menu options
# name        Name or title of the application shown in the menu.
# run         Function to run in order to launch the application.
            # - execute
            # - launch
            # - stay_in_terminal
            # - terminal
# cmd         The command that will run "as if you would use the commandline.
# session     Applications use `tmux` to launch, the 'session' is used to
            # create a unique tmux session name (session+random number).
            # This enable to launch an application multiple time and keep
            # track in tmux.
# description Description will show in the menu.
# is_floating Enables floating window (in I3 windows manager only).
# """

# [-- MENU OPTIONS --]

# MenuOption = namedtuple('MenuOption', ['name', 'run', 'cmd', 'session', 'description', 'is_floating'])


# Allows additional, per site, menu options.
# CONFIG_DIR = os.path.join(os.path.expanduser('~'), '.ael', '.ael-menu')
# CONFIG_FILE = os.path.join(CONFIG_DIR, 'extra.py')
# if os.path.exists(CONFIG_FILE):
    # sys.path.append(CONFIG_DIR)

    # import extra
    # options = options + extra.additional_options

# options = sorted(options, key=lambda o: o.name.lower())

## [SELECTION & LAUNCHER]

def main():

    with open(MAINCONFIG, 'rb') as _input:
        data = tomllib.load(_input)

        ## Convert dict of dict to namedtuple
        MenuOption = namedtuple('MenuOption', ['name', 'run', 'cmd', 'session', 'description', 'is_floating'])
        options = [MenuOption(**values) for values in data['app'].values()]

    if os.path.exists(EXTRACONFIG):
        with open(EXTRACONFIG, 'rb') as _input:
            data = tomllib.load(_input)

            ## Convert dict of dict to namedtuple
            MenuOption = namedtuple('MenuOption', ['name', 'run', 'cmd', 'session', 'description', 'is_floating'])
            extra_options = [MenuOption(**values) for values in data['app'].values()]

            options = options + extra_options

    options = sorted(options, key=lambda o: o.name.lower())

    ## Menu options generator.
    opt = ''.join([f"{o.name:<40}{o.description}\n" for o in options]).encode('UTF-8')

    menu = subprocess.run(['fzf', 
                        '--reverse', 
                        '--prompt=LAUNCH: ',
                        '--no-info',
                        '--no-hscroll',
                        '--pointer=•'], 
                        input=opt, 
                        stdout=subprocess.PIPE)

    selection = menu.stdout.decode('UTF-8').split('  ')[0].strip()
    
    for o in options:
        if o.name == selection:
            selection = o

    add_float = ''
    command = selection.cmd
    session = f"{selection.session}{random.randint(0, 10000)}"
    if selection.is_floating is True:
        add_float = f'''&& sleep 0.05 && i3-msg "[id=$(xdotool getactivewindow)] floating enable, resize set 800px 500px, move position center"'''

    ## (* EXECUTE *)
    if selection.run == 'execute':
        subprocess.run(f"{command} {add_float}", shell=True)

    ## (* LAUNCH *)
    elif selection.run == 'launch':
        subprocess.run(f"tmux new-session -d -s {session}", shell=True)
        sleep(0.1)
        subprocess.run(f"tmux send-keys -t {session} \"nohup {command} >/dev/null 2>&1 & disown && exit\" enter {add_float}", shell=True)

    ## (* STAY IN TERMINAL *)
    elif selection.run == 'stay_in_terminal':
        subprocess.run(f"tmux new-session -d -s {session}", shell=True)
        sleep(0.1)
        subprocess.run(f'''tmux send-keys -t {session} "{command}" enter''', shell=True)
        subprocess.run(f"xfce4-terminal --hide-scrollbar --hide-menubar --hide-toolbar --command=\"env TERM=screen-256color tmux -u a -t '{session}'\" {add_float}", shell=True)

    ## (* TERMINAL *)
    elif selection.run == 'terminal':
        subprocess.run(f"xfce4-terminal --hide-scrollbar --hide-menubar --hide-toolbar --command=\"{command}\" {add_float}", shell=True)

if __name__ == '__main__':
    main()

# vim: foldmethod=marker
## ------------------------------------------------------------- FIN ¯\_(ツ)_/¯

#!/usr/bin/env python
## ----------------------------------------------------------------------- INFO
## [bin/ael-menu2]
## author        = "fantomH @alterEGO Linux"
## created       = 2023-08-08 14:40:10 UTC
## updated       = 2023-08-08 14:40:10 UTC
## description   = "ael-menu: Application launcher using `fzf` and `tmux`"

from collections import namedtuple
import os
import tomllib
from pprint import pprint
import random
import shlex
import subprocess
import sys
from time import sleep

CONFIGDIR = os.path.join(os.path.expanduser('~'), '.ael', '.ael-menu')
MAINCONFIG = os.path.join(CONFIGDIR, 'ael-menu.toml')

# """
# Description of the menu options
# name        Name or title of the application shown in the menu.
# run         Function to run in order to launch the application.
            # - execute
            # - launch
            # - stay_in_terminal
            # - terminal
# cmd         The command that will run "as if you would use the commandline.
# session     Applications use `tmux` to launch, the 'session' is used to
            # create a unique tmux session name (session+random number).
            # This enable to launch an application multiple time and keep
            # track in tmux.
# description Description will show in the menu.
# is_floating Enables floating window (in I3 windows manager only).
# """

# [-- MENU OPTIONS --]

# MenuOption = namedtuple('MenuOption', ['name', 'run', 'cmd', 'session', 'description', 'is_floating'])

# options = [
    # MenuOption('arp-scan local', 'stay_in_terminal', r"""sudo arp-scan; read -p $'\nWould you like to scan the local network? ' REPLY; if [[ \$REPLY =~ ^([yY][eE][sS]|[yY])$ ]]; then sudo arp-scan --localnet; else :; fi""", 'ARPSCAN', 'MAC Address scan.', True),
    # MenuOption('bleachbit', 'launch', 'bleachbit', 'BLEACHBIT', 'Deletes unneeded files to free disk space and maintain privacy.', False),
    # MenuOption('bleachbit as admin', 'launch', 'sudo bleachbit', 'BLEACHBIT', 'Deletes unneeded files to free disk space and maintain privacy (as ROOT).', False),
    # MenuOption('brave', 'launch', 'brave', 'BRAVE', 'Web browser.', False),
    # MenuOption('burp suite', 'launch', 'burpsuite', 'BURP', 'Web applications security testing.', False),
    # MenuOption('bookmarks', 'terminal', 'bookmarks.py', 'BOOKMARKS', 'Bookmarks manager.', True),
    # MenuOption('change background/wallpaper', 'launch', 'nitrogen /usr/local/share/wallpapers', 'null', 'Change wallpapers', False),
    # MenuOption('clean bash history', 'launch', 'code ${HOME}/.bash_history', 'CODE', 'Clean .bash_history with VS code.', False),
    # MenuOption('dirbuster', 'stay_in_terminal', 'dirbuster --help', 'DIRBUSTER', 'brute force directories and files names on web/application servers.', False),
    # MenuOption('exit i3', 'execute', 'i3-msg exit', 'null', 'Exit i3 window manager.', False),
    # MenuOption('firefox', 'launch', 'firefox', 'FIREFOX', 'Web browser.', False),
    # MenuOption('firefox --private', 'launch', 'firefox --private-window', 'SHUTTT', 'Web browser, private session.', False),
    # MenuOption('gimp', 'launch', 'gimp', 'GIMP', 'Drawing app.', False),
    # MenuOption('gobuster', 'stay_in_terminal', 'gobuster --help', 'GOBUSTER', 'Directory/File, DNS and VHost busting tool written in Go.', False),
    # MenuOption('htop', 'terminal', 'htop', 'HTOP', 'Process viewer.', True),
    # MenuOption('inkscape', 'launch', 'inkscape', 'INKSCAPE', 'Drawing app.', False),
    # MenuOption('john', 'stay_in_terminal', 'john --help', 'JOHN', 'John the Ripper password cracker.', False),
    # MenuOption('libreoffice', 'launch', 'libreoffice', 'LIBREOFFICE', 'Office suite.', False),
    # MenuOption('metasploit', 'stay_in_terminal', 'msfconsole', 'METASPLOIT', 'Penetration testing framework.', False),
    # MenuOption('netcat', 'stay_in_terminal', 'nc --help', 'NETCAT', 'Utility for network discovery and security auditing.', False),
    # MenuOption('nmap', 'stay_in_terminal', 'nmap --help | more', 'NMAP', 'Network exploration tool and security / port scanner.', False),
    # MenuOption('nmap NSE', 'terminal', '/usr/local/bin/nmapNSE.sh', 'NMAPNSE', 'Nmap Scripting Engine (NSE) scripts', True),
    # MenuOption('now UTC', 'launch', r"""echo -n $(date --utc "+%F %H:%M:%S %Z") | xclip -selection clipboard""", 'NOWUTC', 'UTC time > clipboard.', False),
    # MenuOption('pavucontrol', 'launch', 'pavucontrol', 'PAVU', 'Volume control.', False),
    # MenuOption('public IP', 'launch', r"""curl --silent http://ipecho.net/plain | xclip -selection clipboard""", 'PUBIP', 'Get your public IP > clipboard.', False),
    # MenuOption('ranger', 'terminal', 'ranger', 'RANGER', 'TUI file manager.', False),
    # MenuOption('reboot', 'execute', 'reboot', 'null', 'Restart computer.', False),
    # MenuOption('remmina', 'launch', 'remmina', 'REMMINA', 'Remote desktop client (RDP, SSH, VNC).', False),
    # MenuOption('scout man pages', 'terminal', 'scout_man.py', 'null', 'Search & view man pages.', False),
    # MenuOption('scout python modules', 'terminal', 'scout_pymodules.py', 'null', 'Search & view python modules documentations.', False),
    # MenuOption('shrug', 'launch', r"""echo -n '¯\_(ツ)_/¯' | xclip -selection clipboard""", 'null', '¯\_(ツ)_/¯ > clipboard', False),
    # MenuOption('shutdown', 'execute', 'shutdown now', 'null', 'Shutdown your PC.', False),
    # MenuOption('sqlitebrowser', 'launch', 'sqlitebrowser', 'SQLB', 'Sqlite GUI browser', False),
    # MenuOption('star wars', 'stay_in_terminal', 'telnet towel.blinkenlights.nl', 'STARWARS', 'Watch ASCII StarWars.', True),
    # MenuOption('terminal', 'launch', r"\$TERMINAL", 'TERMINAL', 'Launch a terminal.', False),
    # MenuOption('thumbs up!', 'launch', r"""echo -n '👍' | xclip -selection clipboard""", 'THUMBSUP', '👍 > clipboard', True),
    # MenuOption('thunar', 'launch', 'thunar', 'THUNAR', 'GUI File manager.', False),
    # MenuOption('thunar for admin', 'launch', 'sudo thunar', 'THUNARROOT', 'GUI File manager, elevated priviledges.', False),
    # MenuOption('tmux attach', 'terminal', 'tmuxplus.sh -a', 'ATTACH', 'List Tmux sessions and attach.', True),
    # MenuOption('toggle connection', 'launch', 'bash /usr/local/bin/toggle_connection.sh', 'CONNECT', 'START/STOP Internet connection.', False),
    # MenuOption('vbox', 'stay_in_terminal', r"""vboxmanage list vms | awk -F '\"' '{ print \$2 }' | fzf | sed 's/\ /\\\ /g' | xargs vboxmanage startvm && exit""", 'VBOX', 'Select a virtual machine.', True),
    # MenuOption('view history', 'stay_in_terminal', r"""cat ${HOME}/.bash_history | fzf""", 'HISTORY', 'View latest bash history.', True),
    # MenuOption('virtualbox', 'launch', 'virtualbox', 'VBOX', 'Open-source virtualization tool.', False),
    # MenuOption('VLC', 'launch', 'vlc', 'VLC', 'VLC media player.', False),
    # MenuOption('volume', 'launch', 'pavucontrol', 'VOLUME', 'Volume control.', False),
    # MenuOption('wireshark', 'launch', 'sudo wireshark', 'WIRESHARK', 'Network traffic analyser.', False),
    # ]

# Allows additional, per site, menu options.
# CONFIG_DIR = os.path.join(os.path.expanduser('~'), '.ael', '.ael-menu')
# CONFIG_FILE = os.path.join(CONFIG_DIR, 'extra.py')
# if os.path.exists(CONFIG_FILE):
    # sys.path.append(CONFIG_DIR)

    # import extra
    # options = options + extra.additional_options

# options = sorted(options, key=lambda o: o.name.lower())

# [-- SELECTION & LAUNCHER --]

def main():

    with open(MAINCONFIG, 'rb') as _input:
        data = tomllib.load(_input)

        ## Convert dict of dict to namedtuple
        MenuOption = namedtuple('MenuOption', ['name', 'run', 'cmd', 'session', 'description', 'is_floating'])
        options = [MenuOption(**values) for values in data['app'].values()]

        options = sorted(options, key=lambda o: o.name.lower())

        ## Menu options generator.
        opt = ''.join([f"{o.name:<40}{o.description}\n" for o in options]).encode('UTF-8')

        menu = subprocess.run(['fzf', 
                            '--reverse', 
                            '--prompt=LAUNCH: ',
                            '--no-info',
                            '--no-hscroll',
                            '--pointer=•'], 
                            input=opt, 
                            stdout=subprocess.PIPE)

        selection = menu.stdout.decode('UTF-8').split('  ')[0].strip()
        
        for o in options:
            if o.name == selection:
                selection = o

        add_float = ''
        command = selection.cmd
        session = f"{selection.session}{random.randint(0, 10000)}"
        if selection.is_floating is True:
            add_float = f'''&& sleep 0.05 && i3-msg "[id=$(xdotool getactivewindow)] floating enable, resize set 800px 500px, move position center"'''

        ## (* EXECUTE *)
        if selection.run == 'execute':
            subprocess.run(f"{command} {add_float}", shell=True)

        ## (* LAUNCH *)
        elif selection.run == 'launch':
            subprocess.run(f"tmux new-session -d -s {session}", shell=True)
            sleep(0.1)
            subprocess.run(f"tmux send-keys -t {session} \"nohup {command} >/dev/null 2>&1 & disown && exit\" enter {add_float}", shell=True)

        ## (* STAY IN TERMINAL *)
        elif selection.run == 'stay_in_terminal':
            subprocess.run(f"tmux new-session -d -s {session}", shell=True)
            sleep(0.1)
            subprocess.run(f'''tmux send-keys -t {session} "{command}" enter''', shell=True)
            subprocess.run(f"xfce4-terminal --hide-scrollbar --hide-menubar --hide-toolbar --command=\"env TERM=screen-256color tmux -u a -t '{session}'\" {add_float}", shell=True)

        ## (* TERMINAL *)
        elif selection.run == 'terminal':
            subprocess.run(f"xfce4-terminal --hide-scrollbar --hide-menubar --hide-toolbar --command=\"{command}\" {add_float}", shell=True)

if __name__ == '__main__':
    main()

# vim: foldmethod=marker
## ------------------------------------------------------------- FIN ¯\_(ツ)_/¯

#!/usr/bin/env python
## { alterEGO Linux: "Open the vault of knowledge" } ----------------------- ##
##                                                                           ##
## /usr/local/bin/ael-help                                                   ##
##   created     : 2022-03-09 11:39:01 UTC                                   ##
##   updated     : 2022-03-10 09:22:36 UTC                                   ##
##   description : Help using `fzf`.                                         ##
## _________________________________________________________________________ ##

from bs4 import BeautifulSoup
import os
import requests
import sqlite3
import subprocess
import tempfile
import webbrowser

## [DATABASE] -------------------------------------------------------------- ##

db_dir = os.path.join(os.path.expanduser('~'), '.alterEGO', '.ael-help')
db_name = f'{db_dir}/ael-help.db'

def check_database():

    if os.path.exists(db_name):
        conn = sqlite3.connect(db_name, uri=True)
    else:
        create_database()

def create_database():

    if not os.path.isdir(db_dir):
        os.makedirs(db_dir)
    conn = sqlite3.connect(db_name, uri=True)
    cur = conn.cursor()

    table_nmapNSE(conn, cur)
    
## [nmapNSE] --------------------------------------------------------------- ##

def get_nmapNSE():
    url = 'https://nmap.org/nsedoc/scripts/'
    r = requests.get(url)
    soup = BeautifulSoup(r.text, 'html5lib')

    ## ref. https://stackoverflow.com/a/67579534/10500496
    ## Handling <dl> correctly.
    nse_name = []
    for dl in soup.find_all('dl'):
        nse_url, nse_text = [], []
        for dt in dl.find_all('dt'):
            nse_name.append(dt.text.strip())
            nse_url.append(dt.find('a')['href'].replace('../', 'https://nmap.org/nsedoc/'))
        for dd in dl.find_all('dd'):
            nse_text.append(dd.text.strip())
        
    nse_scripts = dict(zip(nse_name, zip(nse_url, nse_text)))
    return nse_scripts

def table_nmapNSE(conn, cur):

    cur.execute(""" CREATE TABLE nmapNSE (
                    id integer PRIMARY KEY,
                    name text NOT NULL,
                    url text NOT NULL,
                    info text NOT NULL );""")
    conn.commit()

    nse_scripts = get_nmapNSE()
    for k, v in nse_scripts.items():
        cur.execute("""INSERT INTO nmapNSE (name, url, info) VALUES (?, ?, ?)""", (k, v[0], v[1]))
        conn.commit()

def fzf_nmapNSE():

    conn = sqlite3.connect(db_name, uri=True)
    cur = conn.cursor()

    cur.execute("""SELECT * FROM nmapNSE""")
    records = cur.fetchall()

    options = set()
    for row in records:
        row3 = row[3].replace('\n', 'NEWLINE')
        try:
            opt = f'{row[1]:<60} :: {row[2]} :: {row3}\n'
            options.add(opt)
        except:
            pass

    options = ''.join(sorted(list(options)))

    with tempfile.NamedTemporaryFile(mode='w', delete=False) as f:
        f.write(options)
        f.seek(0)
        dumpfile = f.name

    with open(dumpfile, 'r') as f:
        data = f.read().encode('UTF-8')

    try:
        fzf = subprocess.run(["fzf", 
                              "--no-hscroll",
                              "--reverse",
                              "--exact",
                              "--header=NMAP NSE",
                              "--no-info",
                              "--pointer=•",
                              "--delimiter=::",
                              "--with-nth=1,2",
                              "--preview=echo {3} | sed 's/NEWLINE/\\n/g'",
                              "--preview-window=down:wrap"
                             ], input=data, stdout=subprocess.PIPE)

        selection = fzf.stdout
        url = selection.decode('ascii').split(':: ')[1].strip()

        webbrowser.open_new_tab(url)
    except:
        pass

    conn.close()
    os.remove(dumpfile)

def main():
    check_database()
    fzf_nmapNSE()

if __name__ == '__main__':
    main()

## FIN _____________________________________________________________ ¯\_(ツ)_/¯
